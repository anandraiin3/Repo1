apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: {{ .Values.anm.name }}
  name: {{ .Values.anm.name }}
  namespace: {{ .Values.namespace }}
spec:
  replicas: {{ .Values.anm.replicaCount }}
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
      #minReadySeconds: 120
      #progressDeadlineSeconds : 140
    type: {{ .Values.global.updateStrategy }}
  template:
    metadata:
      labels:
        app: {{ .Values.anm.name }}
    spec:
      containers:
#{{- if eq .Values.global.remoteregistry true }}
#      imagePullSecrets: 
#        - name: {{ .Values.global.imagePullSecret }}
#{{- end }}
      - args:
        - {{ .Values.global.gwdir }}/posix/bin/start-emt-nodemanager
        env:
        - name: GW_DIR
          value: {{ .Values.global.gwdir }}
        - name: GW_TRACE_DIR
          value: {{ .Values.global.gwdir }}/trace
        - name: EMT_TOPOLOGY_TTL
          value: "{{ .Values.anm.emt_topology_ttl }}"
        - name: EMT_HEAP_SIZE_MB
          value: "{{ .Values.anm.emt_heap_size_mb }}"
        - name: APIGW_LOG_TRACE_TO_FILE
          value: "{{ .Values.anm.logTraceToFile }}"
        - name: APIGW_LOG_TRACE_JSON_TO_STDOUT
          value: "{{ .Values.anm.logTraceJSONtoSTDOUT }}"
        name: {{ .Values.anm.name }}
{{- if eq .Values.global.remoteregistry true }}
        image: {{ .Values.global.dockerRegistry }}/{{ .Values.anm.imageName }}:{{ .Values.apigw.imageTag }}
{{- else -}}
      image: {{ .Values.anm.imageName }}:{{ .Values.apigw.imageTag }}  
{{- end }}
        imagePullPolicy: {{ .Values.global.pullPolicy }}
        ports:
        - containerPort: {{ .Values.anm.trafficPort }}
          protocol: TCP
{{- if eq .Values.anm.probes true }}
        livenessProbe:
          httpGet:
            httpHeaders:
            - name: k8sprobe
              value: liveness.{{ .Values.anm.name }}
            path: /healthcheck
            port: {{ .Values.anm.trafficPort }}
            scheme: HTTPS
          initialDelaySeconds: 30
          periodSeconds: 30
          failureThreshold: 5
        readinessProbe:
          httpGet:
            httpHeaders:
            - name: k8sprobe
              value: readiness.{{ .Values.anm.name }}
            path: /healthcheck
            port: {{ .Values.anm.trafficPort }}
            scheme: HTTPS
          initialDelaySeconds: 60
          periodSeconds: 30
          failureThreshold: 5
{{- end }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        resources:
          limits:
            memory: "1024Mi"
{{- if eq .Values.mysql.enabled true }}
      initContainers:
      - name: init-mysql
        image: {{ .Values.global.initImageTag }}
        command: ['sh', '-c', 'until nc -w 3 -v {{ .Values.mysql.hostname }} {{ .Values.mysql.port }}; do echo waiting for mysql; sleep 2; done;']
{{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
status: {}
